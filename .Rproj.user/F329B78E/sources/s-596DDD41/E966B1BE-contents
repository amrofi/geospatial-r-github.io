---
title: "Random Forest - Supervised Image Classification"
---


[**Random forests**](https://en.wikipedia.org/wiki/Random_forest) are based on assembling  multiple iterations of decision trees. They have become a major data analysis tool that performs well in comparison to single iteration classification and regression tree analysis  [Heidema et al., 2006]. Each tree is made by bootstrapping  a part of the original data set to estimate robust  errors. The remaining data are used for testing; and this test data set, is called the **Out-Of-Bag (OOB)** sample. Within a given data set, the  OOB sample values are predicted from the bootstrap samples.  The predictions of the OOB values in all of the data sets are then combined.  The Random Forest algorithm allows estimation of the importance of predictor variables by measuring the mean decrease in prediction accuracy before and after permuting OOB variables.  The difference between the two  are then averaged over all trees and normalized by the standard deviation of the differences.  The Random Forest algorithm can outperform linear regression, and unlike linear regression, RF makes no assumptions about the probability density function of the predicted variable [Hengl et al., 2015; Kuhn and Johnson, 2013]. However, the major disadvantage of the Random Forest algorithm is that it is difficult to interpret the relationships between the predicted and predictor variables. 

The training, testing and prediction grid point data set created in before will be used for training and testing the Support Vector Machine classification model.  The data is avilable for download [here](https://www.dropbox.com/s/kcc7jsxirmhlnzz/DATA_08.7z?dl=0). 

We will use **train()** function of [**caret**](http://topepo.github.io/caret/index.html) package with  **"method"** parameter **"rf"** wrapped from **Random Forest** package.  

#### Load R packages 

```{r message=F, warning=F}
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation 
library(dplyr)        # data manipulation 
library(RStoolbox)    # ploting spatial data 
library(RColorBrewer) # color
library(ggplot2)      # ploting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
```


```{r}
# Define data folder
dataFolder<-"F://Spatial_Data_Processing_and_Analysis_R//Data//DATA_08//"
```


#### Load data

```{r}
train.df<-read.csv(paste0(dataFolder,".\\Sentinel_2\\train_data.csv"), header = T)
test.df<-read.csv(paste0(dataFolder,".\\Sentinel_2\\test_data.csv"), header = T)
```

#### Start foreach to parallelize for model fitting:

```{r}
mc <- makeCluster(detectCores())
registerDoParallel(mc)
```


#### Tunning prameters

```{r message=F, warning=F}
myControl <- trainControl(method="repeatedcv", 
                          number=3, 
                          repeats=2,
                          returnResamp='all', 
                          allowParallel=TRUE)
```

####  Train Random Forest model:

```{r message=F, warning=F}
set.seed(849)
fit.rf <- train(as.factor(Landuse)~B2+B3+B4+B4+B6+B7+B8+B8A+B11+B12, 
                data=train.df,
                method = "rf",
                metric= "Accuracy",
                preProc = c("center", "scale"), 
                trControl = myControl
                )
fit.rf 
```

#### Stop cluster

```{r}
stopCluster(mc)
```

#### Confusion Matrix - train data

```{r}
p1<-predict(fit.rf, train.df, type = "raw")
confusionMatrix(p1, train.df$Landuse)
```


#### Confusion Matrix - test data

```{r}
p2<-predict(fit.rf, test.df, type = "raw")
confusionMatrix(p2, test.df$Landuse)
```


#### Predition at grid location


```{r message=F, warning=F}
# read grid CSV file
grid.df<-read.csv(paste0(dataFolder,".\\Sentinel_2\\prediction_grid_data.csv"), header = T) 
# Preddict at grid location
p3<-as.data.frame(predict(fit.rf, grid.df, type = "raw"))
# Extract predicted landuse class
grid.df$Landuse<-p3$predict  
# Import lnaduse ID file 
ID<-read.csv(paste0(dataFolder,".\\Sentinel_2\\Landuse_ID.csv"), header=T)
# Join landuse ID
grid.new<-join(grid.df, ID, by="Landuse", type="inner") 
# Omit missing values
grid.new.na<-na.omit(grid.new)                                                            
```


#### Convert to raster 

```{r message=F, warning=F}
x<-SpatialPointsDataFrame(as.data.frame(grid.new.na)[, c("x", "y")], data = grid.new.na)
r <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Class_ID")])
```

#### Plot Landuse Map: 

```{r,echo=TRUE,fig.align='center',fig.height=5, fig.width=6.5,message=F, warning=F}
# Color Palette
myPalette <- colorRampPalette(c("light grey","burlywood4", "forestgreen","light green", "dodgerblue"))
# Plot Map
LU<-spplot(r,"Class_ID", main="Supervised Image Classification: Random Forest" , 
      colorkey = list(space="right",tick.number=1,height=1, width=1.5,
              labels = list(at = seq(1,4.8,length=5),cex=1.0,
              lab = c("Road/parking/pavement" ,"Building", "Tree/buses", "Grass", "Water"))),
              col.regions=myPalette,cut=4)
LU
```


#### Write raster:

```{r}
writeRaster(r, filename = paste0(dataFolder,".\\Sentinel_2\\RF_Landuse.tiff"), "GTiff", overwrite=T)
```

